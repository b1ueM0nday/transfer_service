// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package market

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketItem is an auto generated low-level Go binding around an user-defined struct.
type MarketItem struct {
	VendorCode  string
	Name        string
	Description string
	Price       uint64
	Count       uint64
	IsActive    bool
}

// MarketUserData is an auto generated low-level Go binding around an user-defined struct.
type MarketUserData struct {
	Name     string
	Phone    string
	Email    string
	Birthday uint64
	RegTime  uint64
}

// MarketABI is the input ABI used to generate the binding from.
const MarketABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RegisterAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpgradeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"balance\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"birthday\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"regTime\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.UserData\",\"name\":\"userData\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"enumMarket.AccountType\",\"name\":\"accType\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"itemsCount\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vendorCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_count\",\"type\":\"uint64\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_vendorCode\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"changeEmail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"changePhone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accAddress\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"birthday\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"regTime\",\"type\":\"uint64\"}],\"internalType\":\"structMarket.UserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountItemsList\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"vendorCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"structMarket.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_birthday\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_regtime\",\"type\":\"uint64\"}],\"name\":\"registerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vendorCode\",\"type\":\"string\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vendorCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_count\",\"type\":\"uint64\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeAccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

var MarketParsedABI, _ = abi.JSON(strings.NewReader(MarketABI))

// MarketBin is the compiled bytecode used for deploying new contracts.
var MarketBin = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613bf9806100606000396000f3fe6080604052600436106100f75760003560e01c8063750f0acc1161008a578063d1f9b8dc11610059578063d1f9b8dc146102f3578063d2ce06ea1461031c578063d553357d14610345578063e1411b4e1461036e576100fe565b8063750f0acc146102395780637b510fe8146102625780638da5cb5b1461029f578063b6d12018146102ca576100fe565b80635353a2d8116100c65780635353a2d81461017d5780635d359fbd146101a65780635e5c06e2146101cf57806368dfa8ba14610210576100fe565b8063105ee2fd14610103578063137658381461012c578063212702ac146101485780633c8a369f14610152576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190612a87565b610397565b005b61014660048036038101906101419190612b56565b6106ab565b005b6101506107ff565b005b34801561015e57600080fd5b50610167610ab4565b6040516101749190612d8e565b60405180910390f35b34801561018957600080fd5b506101a4600480360381019061019f9190612db0565b610e74565b005b3480156101b257600080fd5b506101cd60048036038101906101c89190612e57565b610fd8565b005b3480156101db57600080fd5b506101f660048036038101906101f19190612e97565b6112f6565b604051610207959493929190612fdd565b60405180910390f35b34801561021c57600080fd5b5061023760048036038101906102329190612db0565b611592565b005b34801561024557600080fd5b50610260600480360381019061025b9190612b56565b611795565b005b34801561026e57600080fd5b5061028960048036038101906102849190612e97565b611a4c565b6040516102969190613037565b60405180910390f35b3480156102ab57600080fd5b506102b4611e07565b6040516102c1919061307a565b60405180910390f35b3480156102d657600080fd5b506102f160048036038101906102ec9190613095565b611e2b565b005b3480156102ff57600080fd5b5061031a60048036038101906103159190612db0565b611fb0565b005b34801561032857600080fd5b50610343600480360381019061033e9190612a87565b612114565b005b34801561035157600080fd5b5061036c60048036038101906103679190612db0565b6123cd565b005b34801561037a57600080fd5b5061039560048036038101906103909190613160565b612531565b005b60018060018111156103ac576103ab612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16600181111561040e5761040d612f66565b5b106106a357600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070186604051610463919061320b565b908152602001604051809103902060030160109054906101000a900460ff16156104c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b99061327f565b60405180910390fd5b60006040518060c001604052808881526020018781526020018681526020018567ffffffffffffffff1681526020018467ffffffffffffffff16815260200160011515815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018860405161055b919061320b565b9081526020016040518091039020600082015181600001908161057e91906134b5565b50602082015181600101908161059491906134b5565b5060408201518160020190816105aa91906134b5565b5060608201518160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160030160106101000a81548160ff021916908315150217905550905050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601879080600181540180825580915050600190039060005260206000200160009091909190915090816106a091906134b5565b50505b505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1661073a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610731906135d3565b60405180910390fd5b7f2e0c6b0825fb35761c774e772006d02dc94e7749fef85139329c9aee772b49648160405161076991906135f3565b60405180910390a180600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff166107d6919061363d565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b60018081111561081257610811612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16600181111561087457610873612f66565b5b036108b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ab906136c5565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a90613731565b60405180910390fd5b6201e240600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146109b257600080fd5b7fd96cd453571f81487afc816b6f2639a59863c768cbf61920023278180f3fbf4560405160405180910390a160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6201e2409081150290604051600060405180830381858888f19350505050158015610a47573d6000803e3d6000fd5b5060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160016101000a81548160ff02191690836001811115610aad57610aac612f66565b5b0217905550565b60608060005b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160029054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff161015610e6c57600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006018267ffffffffffffffff1681548110610bcc57610bcb613751565b5b90600052602060002001604051610be39190613803565b90815260200160405180910390206040518060c0016040529081600082018054610c0c906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610c38906132ce565b8015610c855780601f10610c5a57610100808354040283529160200191610c85565b820191906000526020600020905b815481529060010190602001808311610c6857829003601f168201915b50505050508152602001600182018054610c9e906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610cca906132ce565b8015610d175780601f10610cec57610100808354040283529160200191610d17565b820191906000526020600020905b815481529060010190602001808311610cfa57829003601f168201915b50505050508152602001600282018054610d30906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c906132ce565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b505050505081526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160109054906101000a900460ff161515151581525050828267ffffffffffffffff1681518110610e4e57610e4d613751565b5b60200260200101819052508080610e649061381a565b915050610aba565b508091505090565b6001806001811115610e8957610e88612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff166001811115610eeb57610eea612f66565b5b10610fd457600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1615610f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7790613731565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000019081610fd291906134b5565b505b5050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e906135d3565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff166110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ed90613896565b60405180910390fd5b8067ffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1610156111a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119a90613902565b60405180910390fd5b7fc30a8dd603f549f8b0f2581b27c5cec22f02722ee010004e2902313ef16c30dc82826040516111d4929190613931565b60405180910390a180600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff16611241919061395a565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff166112cc919061363d565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b60016020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff1690806001016040518060a0016040529081600082018054611343906132ce565b80601f016020809104026020016040519081016040528092919081815260200182805461136f906132ce565b80156113bc5780601f10611391576101008083540402835291602001916113bc565b820191906000526020600020905b81548152906001019060200180831161139f57829003601f168201915b505050505081526020016001820180546113d5906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054611401906132ce565b801561144e5780601f106114235761010080835404028352916020019161144e565b820191906000526020600020905b81548152906001019060200180831161143157829003601f168201915b50505050508152602001600282018054611467906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054611493906132ce565b80156114e05780601f106114b5576101008083540402835291602001916114e0565b820191906000526020600020905b8154815290600101906020018083116114c357829003601f168201915b505050505081526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060050160029054906101000a900467ffffffffffffffff16905085565b60018060018111156115a7576115a6612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16600181111561160957611608612f66565b5b1061179157600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018260405161165e919061320b565b908152602001604051809103902060030160109054906101000a900460ff16156116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b4906139e2565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1661171657600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070183604051611768919061320b565b908152602001604051809103902060030160106101000a81548160ff0219169083151502179055505b5050565b6001808111156117a8576117a7612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16600181111561180a57611809612f66565b5b101561184b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184290613a4e565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff166118da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d1906135d3565b60405180910390fd5b8067ffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161015611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e90613902565b60405180910390fd5b7f0c229ef98c6e151a98c11c4b6817bb0e60738b0a4e9cab02b7feba92d23b5d29816040516119b691906135f3565b60405180910390a180600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff16611a23919061395a565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b611a546128aa565b600180811115611a6757611a66612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff166001811115611ac957611ac8612f66565b5b1015611b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0190613a4e565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16611b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b90906135d3565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040518060a0016040529081600082018054611bf6906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054611c22906132ce565b8015611c6f5780601f10611c4457610100808354040283529160200191611c6f565b820191906000526020600020905b815481529060010190602001808311611c5257829003601f168201915b50505050508152602001600182018054611c88906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb4906132ce565b8015611d015780601f10611cd657610100808354040283529160200191611d01565b820191906000526020600020905b815481529060010190602001808311611ce457829003601f168201915b50505050508152602001600282018054611d1a906132ce565b80601f0160208091040260200160405190810160405280929190818152602001828054611d46906132ce565b8015611d935780601f10611d6857610100808354040283529160200191611d93565b820191906000526020600020905b815481529060010190602001808311611d7657829003601f168201915b505050505081526020016003820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070185604051611e7c919061320b565b90815260200160405180910390206002019081611e9991906134b5565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070185604051611eeb919061320b565b908152602001604051809103902060030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070185604051611f73919061320b565b908152602001604051809103902060030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b6001806001811115611fc557611fc4612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16600181111561202757612026612f66565b5b1061211057600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16156120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b390613731565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101908161210e91906134b5565b505b5050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16156121a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219b90613731565b60405180910390fd5b7f929332099f10aa2d4a9815be7b346bc852f57503e9a9ea2fb0a4254e4b440a6d856040516121d39190613aa7565b60405180910390a160006040518060a001604052808781526020018681526020018581526020018467ffffffffffffffff1681526020018367ffffffffffffffff16815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082015181600001908161227291906134b5565b50602082015181600101908161228891906134b5565b50604082015181600201908161229e91906134b5565b5060608201518160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160006101000a81548160ff0219169083151502179055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160016101000a81548160ff021916908360018111156123c0576123bf612f66565b5b0217905550505050505050565b60018060018111156123e2576123e1612f66565b5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16600181111561244457612443612f66565b5b1061252d57600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16156124d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d090613731565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600201908161252b91906134b5565b505b5050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1681600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701846040516125e3919061320b565b908152602001604051809103902060030160009054906101000a900467ffffffffffffffff166126139190613ac9565b67ffffffffffffffff16111561265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590613902565b60405180910390fd5b8067ffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701836040516126b9919061320b565b908152602001604051809103902060030160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16101561272a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272190613b7d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070185604051612795919061320b565b908152602001604051809103902060030160009054906101000a900467ffffffffffffffff166127c59190613ac9565b67ffffffffffffffff169081150290604051600060405180830381858888f193505050501580156127fa573d6000803e3d6000fd5b5080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007018360405161284c919061320b565b908152602001604051809103902060030160088282829054906101000a900467ffffffffffffffff1661287f919061395a565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b6040518060a00160405280606081526020016060815260200160608152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129548261290b565b810181811067ffffffffffffffff821117156129735761297261291c565b5b80604052505050565b60006129866128ed565b9050612992828261294b565b919050565b600067ffffffffffffffff8211156129b2576129b161291c565b5b6129bb8261290b565b9050602081019050919050565b82818337600083830152505050565b60006129ea6129e584612997565b61297c565b905082815260208101848484011115612a0657612a05612906565b5b612a118482856129c8565b509392505050565b600082601f830112612a2e57612a2d612901565b5b8135612a3e8482602086016129d7565b91505092915050565b600067ffffffffffffffff82169050919050565b612a6481612a47565b8114612a6f57600080fd5b50565b600081359050612a8181612a5b565b92915050565b600080600080600060a08688031215612aa357612aa26128f7565b5b600086013567ffffffffffffffff811115612ac157612ac06128fc565b5b612acd88828901612a19565b955050602086013567ffffffffffffffff811115612aee57612aed6128fc565b5b612afa88828901612a19565b945050604086013567ffffffffffffffff811115612b1b57612b1a6128fc565b5b612b2788828901612a19565b9350506060612b3888828901612a72565b9250506080612b4988828901612a72565b9150509295509295909350565b600060208284031215612b6c57612b6b6128f7565b5b6000612b7a84828501612a72565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612be9578082015181840152602081019050612bce565b83811115612bf8576000848401525b50505050565b6000612c0982612baf565b612c138185612bba565b9350612c23818560208601612bcb565b612c2c8161290b565b840191505092915050565b612c4081612a47565b82525050565b60008115159050919050565b612c5b81612c46565b82525050565b600060c0830160008301518482036000860152612c7e8282612bfe565b91505060208301518482036020860152612c988282612bfe565b91505060408301518482036040860152612cb28282612bfe565b9150506060830151612cc76060860182612c37565b506080830151612cda6080860182612c37565b5060a0830151612ced60a0860182612c52565b508091505092915050565b6000612d048383612c61565b905092915050565b6000602082019050919050565b6000612d2482612b83565b612d2e8185612b8e565b935083602082028501612d4085612b9f565b8060005b85811015612d7c5784840389528151612d5d8582612cf8565b9450612d6883612d0c565b925060208a01995050600181019050612d44565b50829750879550505050505092915050565b60006020820190508181036000830152612da88184612d19565b905092915050565b600060208284031215612dc657612dc56128f7565b5b600082013567ffffffffffffffff811115612de457612de36128fc565b5b612df084828501612a19565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e2482612df9565b9050919050565b612e3481612e19565b8114612e3f57600080fd5b50565b600081359050612e5181612e2b565b92915050565b60008060408385031215612e6e57612e6d6128f7565b5b6000612e7c85828601612e42565b9250506020612e8d85828601612a72565b9150509250929050565b600060208284031215612ead57612eac6128f7565b5b6000612ebb84828501612e42565b91505092915050565b612ecd81612a47565b82525050565b600060a0830160008301518482036000860152612ef08282612bfe565b91505060208301518482036020860152612f0a8282612bfe565b91505060408301518482036040860152612f248282612bfe565b9150506060830151612f396060860182612c37565b506080830151612f4c6080860182612c37565b508091505092915050565b612f6081612c46565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612fa657612fa5612f66565b5b50565b6000819050612fb782612f95565b919050565b6000612fc782612fa9565b9050919050565b612fd781612fbc565b82525050565b600060a082019050612ff26000830188612ec4565b81810360208301526130048187612ed3565b90506130136040830186612f57565b6130206060830185612fce565b61302d6080830184612ec4565b9695505050505050565b600060208201905081810360008301526130518184612ed3565b905092915050565b600061306482612df9565b9050919050565b61307481613059565b82525050565b600060208201905061308f600083018461306b565b92915050565b600080600080608085870312156130af576130ae6128f7565b5b600085013567ffffffffffffffff8111156130cd576130cc6128fc565b5b6130d987828801612a19565b945050602085013567ffffffffffffffff8111156130fa576130f96128fc565b5b61310687828801612a19565b935050604061311787828801612a72565b925050606061312887828801612a72565b91505092959194509250565b61313d81613059565b811461314857600080fd5b50565b60008135905061315a81613134565b92915050565b600080600060608486031215613179576131786128f7565b5b60006131878682870161314b565b935050602084013567ffffffffffffffff8111156131a8576131a76128fc565b5b6131b486828701612a19565b92505060406131c586828701612a72565b9150509250925092565b600081905092915050565b60006131e582612baf565b6131ef81856131cf565b93506131ff818560208601612bcb565b80840191505092915050565b600061321782846131da565b915081905092915050565b600082825260208201905092915050565b7f4974656d20616c72656164792065786973747321000000000000000000000000600082015250565b6000613269601483613222565b915061327482613233565b602082019050919050565b600060208201905081810360008301526132988161325c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806132e657607f821691505b6020821081036132f9576132f861329f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026133617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613324565b61336b8683613324565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006133b26133ad6133a884613383565b61338d565b613383565b9050919050565b6000819050919050565b6133cc83613397565b6133e06133d8826133b9565b848454613331565b825550505050565b600090565b6133f56133e8565b6134008184846133c3565b505050565b5b81811015613424576134196000826133ed565b600181019050613406565b5050565b601f8211156134695761343a816132ff565b61344384613314565b81016020851015613452578190505b61346661345e85613314565b830182613405565b50505b505050565b600082821c905092915050565b600061348c6000198460080261346e565b1980831691505092915050565b60006134a5838361347b565b9150826002028217905092915050565b6134be82612baf565b67ffffffffffffffff8111156134d7576134d661291c565b5b6134e182546132ce565b6134ec828285613428565b600060209050601f83116001811461351f576000841561350d578287015190505b6135178582613499565b86555061357f565b601f19841661352d866132ff565b60005b8281101561355557848901518255600182019150602085019450602081019050613530565b86831015613572578489015161356e601f89168261347b565b8355505b6001600288020188555050505b505050505050565b7f4163636f756e7420646f6573206e6f7420657869737473000000000000000000600082015250565b60006135bd601783613222565b91506135c882613587565b602082019050919050565b600060208201905081810360008301526135ec816135b0565b9050919050565b60006020820190506136086000830184612ec4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061364882612a47565b915061365383612a47565b9250828201905067ffffffffffffffff8111156136735761367261360e565b5b92915050565b7f4163636f756e7420616c726561647920726567756c6172000000000000000000600082015250565b60006136af601783613222565b91506136ba82613679565b602082019050919050565b600060208201905081810360008301526136de816136a2565b9050919050565b7f4163636f756e7420616c72656164792065786973747300000000000000000000600082015250565b600061371b601683613222565b9150613726826136e5565b602082019050919050565b6000602082019050818103600083015261374a8161370e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815461378d816132ce565b61379781866131cf565b945060018216600081146137b257600181146137c7576137fa565b60ff19831686528115158202860193506137fa565b6137d0856132ff565b60005b838110156137f2578154818901526001820191506020810190506137d3565b838801955050505b50505092915050565b600061380f8284613780565b915081905092915050565b600061382582612a47565b915067ffffffffffffffff820361383f5761383e61360e565b5b600182019050919050565b7f526563656976657220646f6573206e6f74206578697374730000000000000000600082015250565b6000613880601883613222565b915061388b8261384a565b602082019050919050565b600060208201905081810360008301526138af81613873565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006138ec601283613222565b91506138f7826138b6565b602082019050919050565b6000602082019050818103600083015261391b816138df565b9050919050565b61392b81612e19565b82525050565b60006040820190506139466000830185613922565b6139536020830184612ec4565b9392505050565b600061396582612a47565b915061397083612a47565b9250828203905067ffffffffffffffff8111156139905761398f61360e565b5b92915050565b7f4974656d20616c72656164792072656d6f7665643b0000000000000000000000600082015250565b60006139cc601583613222565b91506139d782613996565b602082019050919050565b600060208201905081810360008301526139fb816139bf565b9050919050565b7f4163636573732064656e6965642c2075706772616465206163636f756e740000600082015250565b6000613a38601e83613222565b9150613a4382613a02565b602082019050919050565b60006020820190508181036000830152613a6781613a2b565b9050919050565b6000613a7982612baf565b613a838185613222565b9350613a93818560208601612bcb565b613a9c8161290b565b840191505092915050565b60006020820190508181036000830152613ac18184613a6e565b905092915050565b6000613ad482612a47565b9150613adf83612a47565b92508167ffffffffffffffff0483118215151615613b0057613aff61360e565b5b828202905092915050565b7f53656c6c65722773206974656d7320636f756e74206973206e6f7420656e6f7560008201527f6768000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b67602283613222565b9150613b7282613b0b565b604082019050919050565b60006020820190508181036000830152613b9681613b5a565b905091905056fea26469706673582212208d193826e39a9fd95b14e4b11f5273fb09a28569ae9c86252b5d277456bb29a864736f6c637828302e382e31362d646576656c6f702e323032322e372e31362b636f6d6d69742e38303030383865330059"

// DeployMarket deploys a new Ethereum contract, binding an instance of Market to it.
func DeployMarket(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Market, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// Market is an auto generated Go binding around an Ethereum contract.
type Market struct {
	MarketCaller     // Read-only binding to the contract
	MarketTransactor // Write-only binding to the contract
	MarketFilterer   // Log filterer for contract events
}

// MarketCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketSession struct {
	Contract     *Market           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketCallerSession struct {
	Contract *MarketCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MarketTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketTransactorSession struct {
	Contract     *MarketTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketRaw struct {
	Contract *Market // Generic contract binding to access the raw methods on
}

// MarketCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketCallerRaw struct {
	Contract *MarketCaller // Generic read-only contract binding to access the raw methods on
}

// MarketTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketTransactorRaw struct {
	Contract *MarketTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarket creates a new instance of Market, bound to a specific deployed contract.
func NewMarket(address common.Address, backend bind.ContractBackend) (*Market, error) {
	contract, err := bindMarket(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Market{MarketCaller: MarketCaller{contract: contract}, MarketTransactor: MarketTransactor{contract: contract}, MarketFilterer: MarketFilterer{contract: contract}}, nil
}

// NewMarketCaller creates a new read-only instance of Market, bound to a specific deployed contract.
func NewMarketCaller(address common.Address, caller bind.ContractCaller) (*MarketCaller, error) {
	contract, err := bindMarket(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketCaller{contract: contract}, nil
}

// NewMarketTransactor creates a new write-only instance of Market, bound to a specific deployed contract.
func NewMarketTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketTransactor, error) {
	contract, err := bindMarket(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketTransactor{contract: contract}, nil
}

// NewMarketFilterer creates a new log filterer instance of Market, bound to a specific deployed contract.
func NewMarketFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketFilterer, error) {
	contract, err := bindMarket(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketFilterer{contract: contract}, nil
}

// bindMarket binds a generic wrapper to an already deployed contract.
func bindMarket(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.MarketCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.MarketTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Market *MarketCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Market.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Market *MarketTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Market *MarketTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Market.Contract.contract.Transact(opts, method, params...)
}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(uint64 balance, (string,string,string,uint64,uint64) userData, bool isActive, uint8 accType, uint64 itemsCount)
func (_Market *MarketCaller) Accounts(opts *bind.CallOpts, arg0 common.Address) (struct {
	Balance    uint64
	UserData   MarketUserData
	IsActive   bool
	AccType    uint8
	ItemsCount uint64
}, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "accounts", arg0)

	outstruct := new(struct {
		Balance    uint64
		UserData   MarketUserData
		IsActive   bool
		AccType    uint8
		ItemsCount uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Balance = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.UserData = *abi.ConvertType(out[1], new(MarketUserData)).(*MarketUserData)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.AccType = *abi.ConvertType(out[3], new(uint8)).(*uint8)
	outstruct.ItemsCount = *abi.ConvertType(out[4], new(uint64)).(*uint64)

	return *outstruct, err

}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(uint64 balance, (string,string,string,uint64,uint64) userData, bool isActive, uint8 accType, uint64 itemsCount)
func (_Market *MarketSession) Accounts(arg0 common.Address) (struct {
	Balance    uint64
	UserData   MarketUserData
	IsActive   bool
	AccType    uint8
	ItemsCount uint64
}, error) {
	return _Market.Contract.Accounts(&_Market.CallOpts, arg0)
}

// Accounts is a free data retrieval call binding the contract method 0x5e5c06e2.
//
// Solidity: function accounts(address ) view returns(uint64 balance, (string,string,string,uint64,uint64) userData, bool isActive, uint8 accType, uint64 itemsCount)
func (_Market *MarketCallerSession) Accounts(arg0 common.Address) (struct {
	Balance    uint64
	UserData   MarketUserData
	IsActive   bool
	AccType    uint8
	ItemsCount uint64
}, error) {
	return _Market.Contract.Accounts(&_Market.CallOpts, arg0)
}

// GetAccountInfo is a free data retrieval call binding the contract method 0x7b510fe8.
//
// Solidity: function getAccountInfo(address accAddress) view returns((string,string,string,uint64,uint64))
func (_Market *MarketCaller) GetAccountInfo(opts *bind.CallOpts, accAddress common.Address) (MarketUserData, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getAccountInfo", accAddress)

	if err != nil {
		return *new(MarketUserData), err
	}

	out0 := *abi.ConvertType(out[0], new(MarketUserData)).(*MarketUserData)

	return out0, err

}

// GetAccountInfo is a free data retrieval call binding the contract method 0x7b510fe8.
//
// Solidity: function getAccountInfo(address accAddress) view returns((string,string,string,uint64,uint64))
func (_Market *MarketSession) GetAccountInfo(accAddress common.Address) (MarketUserData, error) {
	return _Market.Contract.GetAccountInfo(&_Market.CallOpts, accAddress)
}

// GetAccountInfo is a free data retrieval call binding the contract method 0x7b510fe8.
//
// Solidity: function getAccountInfo(address accAddress) view returns((string,string,string,uint64,uint64))
func (_Market *MarketCallerSession) GetAccountInfo(accAddress common.Address) (MarketUserData, error) {
	return _Market.Contract.GetAccountInfo(&_Market.CallOpts, accAddress)
}

// GetAccountItemsList is a free data retrieval call binding the contract method 0x3c8a369f.
//
// Solidity: function getAccountItemsList() view returns((string,string,string,uint64,uint64,bool)[])
func (_Market *MarketCaller) GetAccountItemsList(opts *bind.CallOpts) ([]MarketItem, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "getAccountItemsList")

	if err != nil {
		return *new([]MarketItem), err
	}

	out0 := *abi.ConvertType(out[0], new([]MarketItem)).(*[]MarketItem)

	return out0, err

}

// GetAccountItemsList is a free data retrieval call binding the contract method 0x3c8a369f.
//
// Solidity: function getAccountItemsList() view returns((string,string,string,uint64,uint64,bool)[])
func (_Market *MarketSession) GetAccountItemsList() ([]MarketItem, error) {
	return _Market.Contract.GetAccountItemsList(&_Market.CallOpts)
}

// GetAccountItemsList is a free data retrieval call binding the contract method 0x3c8a369f.
//
// Solidity: function getAccountItemsList() view returns((string,string,string,uint64,uint64,bool)[])
func (_Market *MarketCallerSession) GetAccountItemsList() ([]MarketItem, error) {
	return _Market.Contract.GetAccountItemsList(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Market.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Market *MarketCallerSession) Owner() (common.Address, error) {
	return _Market.Contract.Owner(&_Market.CallOpts)
}

// AddItem is a paid mutator transaction binding the contract method 0x105ee2fd.
//
// Solidity: function addItem(string _vendorCode, string _name, string _description, uint64 _price, uint64 _count) returns()
func (_Market *MarketTransactor) AddItem(opts *bind.TransactOpts, _vendorCode string, _name string, _description string, _price uint64, _count uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "addItem", _vendorCode, _name, _description, _price, _count)
}

// AddItem is a paid mutator transaction binding the contract method 0x105ee2fd.
//
// Solidity: function addItem(string _vendorCode, string _name, string _description, uint64 _price, uint64 _count) returns()
func (_Market *MarketSession) AddItem(_vendorCode string, _name string, _description string, _price uint64, _count uint64) (*types.Transaction, error) {
	return _Market.Contract.AddItem(&_Market.TransactOpts, _vendorCode, _name, _description, _price, _count)
}

// AddItem is a paid mutator transaction binding the contract method 0x105ee2fd.
//
// Solidity: function addItem(string _vendorCode, string _name, string _description, uint64 _price, uint64 _count) returns()
func (_Market *MarketTransactorSession) AddItem(_vendorCode string, _name string, _description string, _price uint64, _count uint64) (*types.Transaction, error) {
	return _Market.Contract.AddItem(&_Market.TransactOpts, _vendorCode, _name, _description, _price, _count)
}

// BuyItem is a paid mutator transaction binding the contract method 0xe1411b4e.
//
// Solidity: function buyItem(address seller, string _vendorCode, uint64 count) returns()
func (_Market *MarketTransactor) BuyItem(opts *bind.TransactOpts, seller common.Address, _vendorCode string, count uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "buyItem", seller, _vendorCode, count)
}

// BuyItem is a paid mutator transaction binding the contract method 0xe1411b4e.
//
// Solidity: function buyItem(address seller, string _vendorCode, uint64 count) returns()
func (_Market *MarketSession) BuyItem(seller common.Address, _vendorCode string, count uint64) (*types.Transaction, error) {
	return _Market.Contract.BuyItem(&_Market.TransactOpts, seller, _vendorCode, count)
}

// BuyItem is a paid mutator transaction binding the contract method 0xe1411b4e.
//
// Solidity: function buyItem(address seller, string _vendorCode, uint64 count) returns()
func (_Market *MarketTransactorSession) BuyItem(seller common.Address, _vendorCode string, count uint64) (*types.Transaction, error) {
	return _Market.Contract.BuyItem(&_Market.TransactOpts, seller, _vendorCode, count)
}

// ChangeEmail is a paid mutator transaction binding the contract method 0xd553357d.
//
// Solidity: function changeEmail(string _email) returns()
func (_Market *MarketTransactor) ChangeEmail(opts *bind.TransactOpts, _email string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "changeEmail", _email)
}

// ChangeEmail is a paid mutator transaction binding the contract method 0xd553357d.
//
// Solidity: function changeEmail(string _email) returns()
func (_Market *MarketSession) ChangeEmail(_email string) (*types.Transaction, error) {
	return _Market.Contract.ChangeEmail(&_Market.TransactOpts, _email)
}

// ChangeEmail is a paid mutator transaction binding the contract method 0xd553357d.
//
// Solidity: function changeEmail(string _email) returns()
func (_Market *MarketTransactorSession) ChangeEmail(_email string) (*types.Transaction, error) {
	return _Market.Contract.ChangeEmail(&_Market.TransactOpts, _email)
}

// ChangeName is a paid mutator transaction binding the contract method 0x5353a2d8.
//
// Solidity: function changeName(string _name) returns()
func (_Market *MarketTransactor) ChangeName(opts *bind.TransactOpts, _name string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "changeName", _name)
}

// ChangeName is a paid mutator transaction binding the contract method 0x5353a2d8.
//
// Solidity: function changeName(string _name) returns()
func (_Market *MarketSession) ChangeName(_name string) (*types.Transaction, error) {
	return _Market.Contract.ChangeName(&_Market.TransactOpts, _name)
}

// ChangeName is a paid mutator transaction binding the contract method 0x5353a2d8.
//
// Solidity: function changeName(string _name) returns()
func (_Market *MarketTransactorSession) ChangeName(_name string) (*types.Transaction, error) {
	return _Market.Contract.ChangeName(&_Market.TransactOpts, _name)
}

// ChangePhone is a paid mutator transaction binding the contract method 0xd1f9b8dc.
//
// Solidity: function changePhone(string _phone) returns()
func (_Market *MarketTransactor) ChangePhone(opts *bind.TransactOpts, _phone string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "changePhone", _phone)
}

// ChangePhone is a paid mutator transaction binding the contract method 0xd1f9b8dc.
//
// Solidity: function changePhone(string _phone) returns()
func (_Market *MarketSession) ChangePhone(_phone string) (*types.Transaction, error) {
	return _Market.Contract.ChangePhone(&_Market.TransactOpts, _phone)
}

// ChangePhone is a paid mutator transaction binding the contract method 0xd1f9b8dc.
//
// Solidity: function changePhone(string _phone) returns()
func (_Market *MarketTransactorSession) ChangePhone(_phone string) (*types.Transaction, error) {
	return _Market.Contract.ChangePhone(&_Market.TransactOpts, _phone)
}

// Deposit is a paid mutator transaction binding the contract method 0x13765838.
//
// Solidity: function deposit(uint64 amount) payable returns()
func (_Market *MarketTransactor) Deposit(opts *bind.TransactOpts, amount uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "deposit", amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x13765838.
//
// Solidity: function deposit(uint64 amount) payable returns()
func (_Market *MarketSession) Deposit(amount uint64) (*types.Transaction, error) {
	return _Market.Contract.Deposit(&_Market.TransactOpts, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x13765838.
//
// Solidity: function deposit(uint64 amount) payable returns()
func (_Market *MarketTransactorSession) Deposit(amount uint64) (*types.Transaction, error) {
	return _Market.Contract.Deposit(&_Market.TransactOpts, amount)
}

// RegisterAccount is a paid mutator transaction binding the contract method 0xd2ce06ea.
//
// Solidity: function registerAccount(string _name, string _phone, string _email, uint64 _birthday, uint64 _regtime) returns()
func (_Market *MarketTransactor) RegisterAccount(opts *bind.TransactOpts, _name string, _phone string, _email string, _birthday uint64, _regtime uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "registerAccount", _name, _phone, _email, _birthday, _regtime)
}

// RegisterAccount is a paid mutator transaction binding the contract method 0xd2ce06ea.
//
// Solidity: function registerAccount(string _name, string _phone, string _email, uint64 _birthday, uint64 _regtime) returns()
func (_Market *MarketSession) RegisterAccount(_name string, _phone string, _email string, _birthday uint64, _regtime uint64) (*types.Transaction, error) {
	return _Market.Contract.RegisterAccount(&_Market.TransactOpts, _name, _phone, _email, _birthday, _regtime)
}

// RegisterAccount is a paid mutator transaction binding the contract method 0xd2ce06ea.
//
// Solidity: function registerAccount(string _name, string _phone, string _email, uint64 _birthday, uint64 _regtime) returns()
func (_Market *MarketTransactorSession) RegisterAccount(_name string, _phone string, _email string, _birthday uint64, _regtime uint64) (*types.Transaction, error) {
	return _Market.Contract.RegisterAccount(&_Market.TransactOpts, _name, _phone, _email, _birthday, _regtime)
}

// RemoveItem is a paid mutator transaction binding the contract method 0x68dfa8ba.
//
// Solidity: function removeItem(string _vendorCode) returns()
func (_Market *MarketTransactor) RemoveItem(opts *bind.TransactOpts, _vendorCode string) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "removeItem", _vendorCode)
}

// RemoveItem is a paid mutator transaction binding the contract method 0x68dfa8ba.
//
// Solidity: function removeItem(string _vendorCode) returns()
func (_Market *MarketSession) RemoveItem(_vendorCode string) (*types.Transaction, error) {
	return _Market.Contract.RemoveItem(&_Market.TransactOpts, _vendorCode)
}

// RemoveItem is a paid mutator transaction binding the contract method 0x68dfa8ba.
//
// Solidity: function removeItem(string _vendorCode) returns()
func (_Market *MarketTransactorSession) RemoveItem(_vendorCode string) (*types.Transaction, error) {
	return _Market.Contract.RemoveItem(&_Market.TransactOpts, _vendorCode)
}

// Transfer is a paid mutator transaction binding the contract method 0x5d359fbd.
//
// Solidity: function transfer(address receiver, uint64 amount) returns()
func (_Market *MarketTransactor) Transfer(opts *bind.TransactOpts, receiver common.Address, amount uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "transfer", receiver, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x5d359fbd.
//
// Solidity: function transfer(address receiver, uint64 amount) returns()
func (_Market *MarketSession) Transfer(receiver common.Address, amount uint64) (*types.Transaction, error) {
	return _Market.Contract.Transfer(&_Market.TransactOpts, receiver, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x5d359fbd.
//
// Solidity: function transfer(address receiver, uint64 amount) returns()
func (_Market *MarketTransactorSession) Transfer(receiver common.Address, amount uint64) (*types.Transaction, error) {
	return _Market.Contract.Transfer(&_Market.TransactOpts, receiver, amount)
}

// UpdateItem is a paid mutator transaction binding the contract method 0xb6d12018.
//
// Solidity: function updateItem(string _vendorCode, string _desc, uint64 _price, uint64 _count) returns()
func (_Market *MarketTransactor) UpdateItem(opts *bind.TransactOpts, _vendorCode string, _desc string, _price uint64, _count uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "updateItem", _vendorCode, _desc, _price, _count)
}

// UpdateItem is a paid mutator transaction binding the contract method 0xb6d12018.
//
// Solidity: function updateItem(string _vendorCode, string _desc, uint64 _price, uint64 _count) returns()
func (_Market *MarketSession) UpdateItem(_vendorCode string, _desc string, _price uint64, _count uint64) (*types.Transaction, error) {
	return _Market.Contract.UpdateItem(&_Market.TransactOpts, _vendorCode, _desc, _price, _count)
}

// UpdateItem is a paid mutator transaction binding the contract method 0xb6d12018.
//
// Solidity: function updateItem(string _vendorCode, string _desc, uint64 _price, uint64 _count) returns()
func (_Market *MarketTransactorSession) UpdateItem(_vendorCode string, _desc string, _price uint64, _count uint64) (*types.Transaction, error) {
	return _Market.Contract.UpdateItem(&_Market.TransactOpts, _vendorCode, _desc, _price, _count)
}

// UpgradeAccount is a paid mutator transaction binding the contract method 0x212702ac.
//
// Solidity: function upgradeAccount() payable returns()
func (_Market *MarketTransactor) UpgradeAccount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "upgradeAccount")
}

// UpgradeAccount is a paid mutator transaction binding the contract method 0x212702ac.
//
// Solidity: function upgradeAccount() payable returns()
func (_Market *MarketSession) UpgradeAccount() (*types.Transaction, error) {
	return _Market.Contract.UpgradeAccount(&_Market.TransactOpts)
}

// UpgradeAccount is a paid mutator transaction binding the contract method 0x212702ac.
//
// Solidity: function upgradeAccount() payable returns()
func (_Market *MarketTransactorSession) UpgradeAccount() (*types.Transaction, error) {
	return _Market.Contract.UpgradeAccount(&_Market.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x750f0acc.
//
// Solidity: function withdraw(uint64 amount) returns()
func (_Market *MarketTransactor) Withdraw(opts *bind.TransactOpts, amount uint64) (*types.Transaction, error) {
	return _Market.contract.Transact(opts, "withdraw", amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x750f0acc.
//
// Solidity: function withdraw(uint64 amount) returns()
func (_Market *MarketSession) Withdraw(amount uint64) (*types.Transaction, error) {
	return _Market.Contract.Withdraw(&_Market.TransactOpts, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x750f0acc.
//
// Solidity: function withdraw(uint64 amount) returns()
func (_Market *MarketTransactorSession) Withdraw(amount uint64) (*types.Transaction, error) {
	return _Market.Contract.Withdraw(&_Market.TransactOpts, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Market *MarketTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Market.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Market *MarketSession) Receive() (*types.Transaction, error) {
	return _Market.Contract.Receive(&_Market.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Market *MarketTransactorSession) Receive() (*types.Transaction, error) {
	return _Market.Contract.Receive(&_Market.TransactOpts)
}

// MarketDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Market contract.
type MarketDepositIterator struct {
	Event *MarketDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketDeposit represents a Deposit event raised by the Market contract.
type MarketDeposit struct {
	Amount uint64
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2e0c6b0825fb35761c774e772006d02dc94e7749fef85139329c9aee772b4964.
//
// Solidity: event Deposit(uint64 amount)
func (_Market *MarketFilterer) FilterDeposit(opts *bind.FilterOpts) (*MarketDepositIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &MarketDepositIterator{contract: _Market.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

var DepositTopicHash = "0x2e0c6b0825fb35761c774e772006d02dc94e7749fef85139329c9aee772b4964"

// WatchDeposit is a free log subscription operation binding the contract event 0x2e0c6b0825fb35761c774e772006d02dc94e7749fef85139329c9aee772b4964.
//
// Solidity: event Deposit(uint64 amount)
func (_Market *MarketFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *MarketDeposit) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketDeposit)
				if err := _Market.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2e0c6b0825fb35761c774e772006d02dc94e7749fef85139329c9aee772b4964.
//
// Solidity: event Deposit(uint64 amount)
func (_Market *MarketFilterer) ParseDeposit(log types.Log) (*MarketDeposit, error) {
	event := new(MarketDeposit)
	if err := _Market.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketRegisterAccountIterator is returned from FilterRegisterAccount and is used to iterate over the raw logs and unpacked data for RegisterAccount events raised by the Market contract.
type MarketRegisterAccountIterator struct {
	Event *MarketRegisterAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketRegisterAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketRegisterAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketRegisterAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketRegisterAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketRegisterAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketRegisterAccount represents a RegisterAccount event raised by the Market contract.
type MarketRegisterAccount struct {
	Name string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRegisterAccount is a free log retrieval operation binding the contract event 0x929332099f10aa2d4a9815be7b346bc852f57503e9a9ea2fb0a4254e4b440a6d.
//
// Solidity: event RegisterAccount(string name)
func (_Market *MarketFilterer) FilterRegisterAccount(opts *bind.FilterOpts) (*MarketRegisterAccountIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "RegisterAccount")
	if err != nil {
		return nil, err
	}
	return &MarketRegisterAccountIterator{contract: _Market.contract, event: "RegisterAccount", logs: logs, sub: sub}, nil
}

var RegisterAccountTopicHash = "0x929332099f10aa2d4a9815be7b346bc852f57503e9a9ea2fb0a4254e4b440a6d"

// WatchRegisterAccount is a free log subscription operation binding the contract event 0x929332099f10aa2d4a9815be7b346bc852f57503e9a9ea2fb0a4254e4b440a6d.
//
// Solidity: event RegisterAccount(string name)
func (_Market *MarketFilterer) WatchRegisterAccount(opts *bind.WatchOpts, sink chan<- *MarketRegisterAccount) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "RegisterAccount")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketRegisterAccount)
				if err := _Market.contract.UnpackLog(event, "RegisterAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterAccount is a log parse operation binding the contract event 0x929332099f10aa2d4a9815be7b346bc852f57503e9a9ea2fb0a4254e4b440a6d.
//
// Solidity: event RegisterAccount(string name)
func (_Market *MarketFilterer) ParseRegisterAccount(log types.Log) (*MarketRegisterAccount, error) {
	event := new(MarketRegisterAccount)
	if err := _Market.contract.UnpackLog(event, "RegisterAccount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Market contract.
type MarketTransferIterator struct {
	Event *MarketTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketTransfer represents a Transfer event raised by the Market contract.
type MarketTransfer struct {
	Receiver common.Address
	Amount   uint64
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xc30a8dd603f549f8b0f2581b27c5cec22f02722ee010004e2902313ef16c30dc.
//
// Solidity: event Transfer(address receiver, uint64 amount)
func (_Market *MarketFilterer) FilterTransfer(opts *bind.FilterOpts) (*MarketTransferIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return &MarketTransferIterator{contract: _Market.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

var TransferTopicHash = "0xc30a8dd603f549f8b0f2581b27c5cec22f02722ee010004e2902313ef16c30dc"

// WatchTransfer is a free log subscription operation binding the contract event 0xc30a8dd603f549f8b0f2581b27c5cec22f02722ee010004e2902313ef16c30dc.
//
// Solidity: event Transfer(address receiver, uint64 amount)
func (_Market *MarketFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MarketTransfer) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Transfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketTransfer)
				if err := _Market.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xc30a8dd603f549f8b0f2581b27c5cec22f02722ee010004e2902313ef16c30dc.
//
// Solidity: event Transfer(address receiver, uint64 amount)
func (_Market *MarketFilterer) ParseTransfer(log types.Log) (*MarketTransfer, error) {
	event := new(MarketTransfer)
	if err := _Market.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketUpgradeAccountIterator is returned from FilterUpgradeAccount and is used to iterate over the raw logs and unpacked data for UpgradeAccount events raised by the Market contract.
type MarketUpgradeAccountIterator struct {
	Event *MarketUpgradeAccount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketUpgradeAccountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketUpgradeAccount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketUpgradeAccount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketUpgradeAccountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketUpgradeAccountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketUpgradeAccount represents a UpgradeAccount event raised by the Market contract.
type MarketUpgradeAccount struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUpgradeAccount is a free log retrieval operation binding the contract event 0xd96cd453571f81487afc816b6f2639a59863c768cbf61920023278180f3fbf45.
//
// Solidity: event UpgradeAccount()
func (_Market *MarketFilterer) FilterUpgradeAccount(opts *bind.FilterOpts) (*MarketUpgradeAccountIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "UpgradeAccount")
	if err != nil {
		return nil, err
	}
	return &MarketUpgradeAccountIterator{contract: _Market.contract, event: "UpgradeAccount", logs: logs, sub: sub}, nil
}

var UpgradeAccountTopicHash = "0xd96cd453571f81487afc816b6f2639a59863c768cbf61920023278180f3fbf45"

// WatchUpgradeAccount is a free log subscription operation binding the contract event 0xd96cd453571f81487afc816b6f2639a59863c768cbf61920023278180f3fbf45.
//
// Solidity: event UpgradeAccount()
func (_Market *MarketFilterer) WatchUpgradeAccount(opts *bind.WatchOpts, sink chan<- *MarketUpgradeAccount) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "UpgradeAccount")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketUpgradeAccount)
				if err := _Market.contract.UnpackLog(event, "UpgradeAccount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgradeAccount is a log parse operation binding the contract event 0xd96cd453571f81487afc816b6f2639a59863c768cbf61920023278180f3fbf45.
//
// Solidity: event UpgradeAccount()
func (_Market *MarketFilterer) ParseUpgradeAccount(log types.Log) (*MarketUpgradeAccount, error) {
	event := new(MarketUpgradeAccount)
	if err := _Market.contract.UnpackLog(event, "UpgradeAccount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the Market contract.
type MarketWithdrawalIterator struct {
	Event *MarketWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketWithdrawal represents a Withdrawal event raised by the Market contract.
type MarketWithdrawal struct {
	Amount uint64
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x0c229ef98c6e151a98c11c4b6817bb0e60738b0a4e9cab02b7feba92d23b5d29.
//
// Solidity: event Withdrawal(uint64 amount)
func (_Market *MarketFilterer) FilterWithdrawal(opts *bind.FilterOpts) (*MarketWithdrawalIterator, error) {

	logs, sub, err := _Market.contract.FilterLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return &MarketWithdrawalIterator{contract: _Market.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

var WithdrawalTopicHash = "0x0c229ef98c6e151a98c11c4b6817bb0e60738b0a4e9cab02b7feba92d23b5d29"

// WatchWithdrawal is a free log subscription operation binding the contract event 0x0c229ef98c6e151a98c11c4b6817bb0e60738b0a4e9cab02b7feba92d23b5d29.
//
// Solidity: event Withdrawal(uint64 amount)
func (_Market *MarketFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *MarketWithdrawal) (event.Subscription, error) {

	logs, sub, err := _Market.contract.WatchLogs(opts, "Withdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketWithdrawal)
				if err := _Market.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0x0c229ef98c6e151a98c11c4b6817bb0e60738b0a4e9cab02b7feba92d23b5d29.
//
// Solidity: event Withdrawal(uint64 amount)
func (_Market *MarketFilterer) ParseWithdrawal(log types.Log) (*MarketWithdrawal, error) {
	event := new(MarketWithdrawal)
	if err := _Market.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
